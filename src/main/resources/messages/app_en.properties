app.title=Votes in restaurants
app.home=Home
app.footer=Diploma <a href="https://github.com/ValentinJD/Where-to-eat.git" target=_blank>Spring 5/JPA Enterprise (Topjava)</a> application
app.login=Login as
app.description=Description application
app.description2=Description application
app.price=Price, rub
app.filter=Filter in name restaurant
app.profile=profile
user.action=Action
app.register=Registration
app.registered=You are registered. Please Sign in.
user.delete=Delete
user.create=Create
user.create.user=Create User
user.create.admin=Create Administrator
user.edit=Edit
user.id=Id
user.title=Users
user.name=Name
user.password=Password
user.email=Email
user.roles=Roles
user.active=Active
user.registered=Registered
user.admin=Administrator
user.user=User
restaurant.title=Restaurant
restaurants.menu=Menu
restaurants.id=Id restaurants
restaurants.additemmenu=Add item menu
restaurants.create=Create new restaurant
common.select=Select
common.save=Save
common.cancel=Cancel
common.delete=Delete
common.update=Update
common.create=Create
common.filter=Filter
voter.count=Vote count
voter.against=To vote against
voter.for=To vote for
voter.date=Date vote
voter.list=List vote
voter.id=Id vote
common.appError=Application error
common.deleted=Record deleted
common.saved=Record saved
common.enabled=Record enabled
common.disabled=Record disabled
common.errorStatus=Error status
common.confirm=Are you sure?
common.hello=Hi 
common.vote=Voice accepted
common.search=Search
exception.common.notFound=Not found entity with {0}
exception.user.modificationRestriction=Admin/User modification is forbidden
exception.user.duplicateEmail=User with this email already exists
exception.meal.duplicateDateTime=You already have meal with this date/time
app.stackTitle=Application stack:
app.descriptionapp=Vote for the restaurant with the best food \
 (Assignment for a thesis on an internship https://topjava.ru/ ) \
 Development and implementation of REST API using in backend: Hibernate / Spring/ SpringMVC (or Spring-Boot) \
 in frontend: HTML, CSS, Javascript, jQuery, AJAX, Bootstrap, \
 with registration/authorization and access rights based on roles (USER, ADMIN).  \
 The administrator can create/edit / delete restaurants and menus, and users can manage their profile and \
  vote via the UI (via AJAX) and via the REST interface with basic authorization. \
  You can filter restaurants and menus by name.\
  The entire REST interface is covered by JUnit tests using Spring MVC Test and Spring Security Test.\
  The task is: \
  Build a voting system to decide where to eat lunch. \
  2 types of users: administrator and regular users The administrator can enter the restaurant, this is the lunch \
  menu of the day (usually 2-5 items, just the name of the dish and the price) The menu changes
userTo.name=Name
userTo.email=Email
userTo.password=Password
error.appError=Application error
error.dataNotFound=Data not found
error.dataError=Data error
error.validationError=Validation error
error.wrongRequest=Wrong request
NotEmpty=[{0}] must not be empty
NotBlank=[{0}] must not be empty
NotNull=[{0}] must not be empty
Email=Invalid format of [{0}]
Range=[{0}] must be between {2} and {1}
Length=[{0}] length must be between {2} and {1}
Size=[{0}] size must be between {2} and {1}
SafeHtml=[{0}] has html content

